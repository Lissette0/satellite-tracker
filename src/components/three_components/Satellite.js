/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import satellite from "./scene.glb"
import { useFrame } from '@react-three/fiber'
import * as THREE from 'three'

export default function Satellite(props) {
  const group = useRef()
  const { nodes, materials } = useGLTF(satellite)

  const ellipseCurvePoints = new THREE.EllipseCurve(...props.ellipseArgs)

  useFrame(({ clock }) => {
    let frame = clock.elapsedTime % props.rate
    let point = ellipseCurvePoints.getPointAt((frame / props.rate))
    group.current.position.x = point.x
    group.current.position.y = point.y
    group.current.rotation.y = group.current.rotation.x += 0.01

  })

  return (
    <group ref={group} {...props} dispose={null} >
      <group rotation={[-Math.PI / 2, Math.PI / 2, 0]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <group rotation={[-Math.PI / 2, 0, -Math.PI / 2]} scale={props.scale}>
            <mesh geometry={nodes.Satellite_Material001_0.geometry} material={materials['Material.001']} />
            <mesh geometry={nodes.Satellite_Material002_0.geometry} material={materials['Material.002']} />
            <mesh geometry={nodes.Satellite_Satellite_0.geometry} material={materials.Satellite} />
            <mesh geometry={nodes.Satellite_Solar_0.geometry} material={materials.Solar} />
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload(satellite)
